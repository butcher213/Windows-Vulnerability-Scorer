# FTP scoring system  
#
# Author: Trevor Butcher
# Creation Date: 13 September 2017

# Get the ftp commands
from ftplib import FTP
import configVariables as cv
def scoreftp():
    if cv.FTP_scoreUptime == True:
        #set username and password
        FTPusername = cv.FTP_username
        FTPpassword = cv.FTP_password

        #count up the number of trues and put that number here
        pointsnum = 1

        #create the scoring list or errors and vulnerabilities
        errors = []
        corrects = []
        #try to connect to the server
        try:
            ftp = FTP(cv.FTP_server)
        except:
            
            #save the error
            errors.append('The scoring system does not detect an FTP service at ' + cv.FTP_server  + ':21')
        else:

            #if server exists, continue the program
            #try to login to the server
            #if you wanted to score Anonymous access, that is right here
            if cv.FTP_anonAccess == True or cv.FTPV_anonymousAccess == True:
                try:
                    ftp.login()
                except:
                    corrects.append("Anonymous FTP is disabled")
                else:
                    ftp.close()
                    ftp = FTP(cv.FTP_server)
            try:
                if cv.FTP_anonAccess == False:
                    ftpLogin = ftp.login(FTPusername, FTPpassword)
                else:
                    ftp.login()
            except:

                #save the error
                errors.append('The scoring system cannot log in')
            else:

                #if login successsful, continue
                try:
                    #switch to the docs directory
                    if cv.FTP_directory != False:
                        ftp.cwd(cv.FTP_directory)
                    else:
                        a = 0 # I have to do something or else try will break
                except:

                    #save the error
                    errors.append('The scoring system cannot detect the directory "' + cv.FTP_directory + '"')
                else:
                    #read the contents of the server
                    serverDirectory = ftp.nlst()
                    
                    if(cv.FTP_scoredFile in serverDirectory):
                        a = True
                    else:
                        errors.append('The scoring system does not see "' + cv.FTP_scoredFile + '".')
                    ftp.close()
        # Generate score and errors
        iteration = 0

        #Generate the vairables that will store the raw HTML
        #stuffToSend = ''
        errorList = '<span id="ftperrortarget">'
        correctList = ''
        serviceTableValues = '<td id="ftp_table">'
        webPatched = ''
        webBottom = ''
        #retrieve errors and vulnerabilities
        for error in errors:
            errorList += "FTP: " + error + "<br/>"

        for correct in corrects:
            iteration += 1
            correctList += "<li>" + correct + "</li>"


        #if no errors, display service being up

        if len(errors) == 0:
            serviceTableValues += '<img src="service_up.png" height="50"/>'
        else:
            serviceTableValues += '<img src="service_down.png" height="50"/>'

        #appened the parts used to locate the strings for the next iteration
        serviceTableValues += "</td><!--ftpstop-->"
        errorList += "</span><!--ftperrorstop-->"

        #retrieve the webpage data
        webpage = open("scores.html", "r+")
        webData = webpage.read()
        webpage.close()

        # split webdata for the service uptime
        webSplit = webData.split('<td id="ftp_table">')
        webSplit.append(webSplit[1].split('</td><!--ftpstop-->'))

        #piece it back together
        webPatched += webSplit[0] + serviceTableValues
        webBottom = webSplit[2][1]
        # split webdata for errors
        webSplit = webBottom.split('<span id="ftperrortarget">')
        webSplit.append(webSplit[1].split('</span><!--ftperrorstop-->'))

        #piece it back together
        webPatched += webSplit[0] + errorList + webSplit[2][1]

        #write the service downtime to the webpage
        webpage = open("scores.html", "w")
        webpage.write(str(webPatched))
        webpage.close()
    else:
        iteration = 0
        pointsnum = 0
        correctList = ''
    #return the points scored, total points
    return [iteration, pointsnum, correctList]
