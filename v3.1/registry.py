#get the registry crap
import _winreg

#get the globally defined variables
import configVariables as cv

# BECAUSE THESE ARE REGISTRY VALUES, THEY ARE TUPLES. NOT LISTS.
# YOU CANNOT MODIFY A TUPLE'S VALUES
# read this for more information: https://www.tutorialspoint.com/python/python_tuples.htm

def scoreRegistry():
    # create the points scored, total points, and html variables
    pointsScored = 0
    totalPoints = 0
    htmlOutput = ''
    #connect to the registry
    registry = _winreg.ConnectRegistry(None, _winreg.HKEY_CURRENT_USER)
    remotedesktopregistry = _winreg.ConnectRegistry(None, _winreg.HKEY_LOCAL_MACHINE)
    
    # score screen saver
    if cv.RV_screenSaver == True:
        totalPoints += 1
        #read the registry value for the screen saver security
        rawkeyscreensaver = _winreg.OpenKey(registry, r"Control Panel\Desktop", 0, (_winreg.KEY_WOW64_64KEY + _winreg.KEY_ALL_ACCESS))

        # get the value of the screensaverissecure key
        secureScreenSaver = _winreg.EnumValue(rawkeyscreensaver, 50)
        # check screen saver
        if secureScreenSaver == 1:
            htmlOutput += '<li>Screen Saver is secured.</li>'
            pointsScored += 1
    # score IE enhanced protected mode
    if cv.RV_IEEPM == True:
        totalPoints += 1
        #read the registry value for ie enhanced protected mode
        rawkeyIEEPM = _winreg.OpenKey(registry, r"Software\\Microsoft\\Internet Explorer\\Main", 0, (_winreg.KEY_WOW64_64KEY + _winreg.KEY_ALL_ACCESS))
        # get the value of the IE enhanced protected mode key
        IEEPMenabled = _winreg.EnumValue(rawkeyIEEPM, 55)[1]
        # check IE enhanced protected mode
        if IEEPMenabled == 'PMEM':
            htmlOutput += '<li>Internet Properties: Enable Enhanced Protected Mode has been enabled</li>'
            pointsScored += 1
            

    # score smartscreen
    if cv.RV_smartScreen == True:
        totalPoints += 1
        #read the registry value for smartscreen
        rawkeySmartScreen = _winreg.OpenKey(registry, r"Software\\Microsoft\\Internet Explorer\\PhishingFilter", 0, (_winreg.KEY_WOW64_64KEY + _winreg.KEY_ALL_ACCESS))
        # get the value of the smartscreen filter in internet options key
        IESmartScreen = _winreg.EnumValue(rawkeySmartScreen, 0)[1]
        # check smartscreen
        if IESmartScreen == 1:
            htmlOutput += '<li>Internet Properties: Enable Enhanced Protected Mode has been enabled</li>'
            pointsScored += 1
    # remote desktop
    rawkeyRDP = _winreg.OpenKey(remotedesktopregistry, r"SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", 0, (_winreg.KEY_WOW64_64KEY + _winreg.KEY_ALL_ACCESS))
    i = 0
    if cv.RDP_unknownPublishers == True:
        totalPoints += 1
    if cv.RDP_SecureRPCcommunication == True:
        totalPoints += 1
    if cv.RDP_clientEncryption == True:
        totalPoints += 1
    if cv.RDP_promptForPassword == True:
        totalPoints += 1
    if cv.IE_invalidSoftwareInstall == True:
        totalPoints += 1
    if cv.IE_integratedWindowsAuthentication == True:
        totalPoints += 1
    if cv.IE_3rdPartyBrowserExtensions == True:
        totalPoints += 1
    if cv.IE_HTTPProxy == True:
        totalPoints += 1
    # since these RDP settings are admin templates, and therefore dynamic,
    # we need to implicitly retrieve the applicable settings.
    while True:
        try:
            name, value, type = _winreg.EnumValue(rawkeyRDP, i)
            #print(name, value, i)
            # score allow .rdp files from unknown publishers
            if name == 'AllowUnsignedFiles' and value == 0 and cv.RDP_unknownPublishers == True:
                pointsScored += 1
                htmlOutput += '<li>Remote Desktop does not allow .rdp files from unknown publishers</li>'
            if name == 'fEncryptRPCTraffic' and value == 1 and cv.RDP_SecureRPCcommunication == True:
                pointsScored += 1
                htmlOutput += '<li>Remote Desktop requires secure RPC communication</li>'
            if name == 'MinEncryptionLevel' and value == 3 and cv.RDP_clientEncryption == True:
                pointsScored += 1
                htmlOutput += '<li>Remote desktop requires the highest level of client encryption</li>'
            if name == 'fPromptForPassword' and value == 1 and cv.RDP_promptForPassword == True:
                pointsScored += 1
                htmlOutput += '<li>Remote Desktop always prompts for password upon client connection</li>'
            i += 1
        except:
            break

#============================Internet Explorer settings =================================
    rawkeyIEextensions = _winreg.OpenKey(registry, r"Software\\Microsoft\\Internet Explorer\\Main", 0, (_winreg.KEY_WOW64_64KEY + _winreg.KEY_ALL_ACCESS))
    i = 0
    # since 3rd party browser extensions are stored someplace completely different, find them first
    while True:
        try:
            name, value, type = _winreg.EnumValue(rawkeyIEextensions, i)
            #print(name, value, i)
            if name == 'Enable Browser Extensions' and value == 'no' and cv.IE_3rdPartyBrowserExtensions == True:
                pointsScored += 1
                htmlOutput += '<li>Internet Explorer does not allow 3rd party browser extensions</li>'
                #since this is the only thing to find here, let's break the loop
                break
            i += 1
        except:
            break
    # ie internet options
    rawkeyIE = _winreg.OpenKey(registry, r"Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings", 0, (_winreg.KEY_WOW64_64KEY + _winreg.KEY_ALL_ACCESS))
    i = 0
    while True:
        try:
            name, value, type = _winreg.EnumValue(rawkeyIE, i)
            if name == 'ProxyHttp1.1' and value == 0 and cv.IE_HTTPProxy == True:
                pointsScored += 1
                htmlOutput += '<li>Internet Explorer does not use HTTP 1.1 through proxy connections</li>'
            if name == 'EnableNegotiate' and value == 1 and cv.IE_integratedWindowsAuthentication == True:
                pointsScored += 1
                htmlOutput += '<li>Integrated Windows Authentication for Internet Explorer is enabled</li>'
            i += 1
        except:
            break
    rawkeyIE = _winreg.OpenKey(registry, r"Software\\Microsoft\\Internet Explorer\\Download", 0, (_winreg.KEY_WOW64_64KEY + _winreg.KEY_ALL_ACCESS))
    i = 0
    # check invalid software signatures
    while True:
        try:
            name, value, type = _winreg.EnumValue(rawkeyIE, i)
            #print(name, value, i)
            if name == 'RunInvalidSigratures' and value == 0 and cv.IE_invalidSoftwareInstall == True:
                pointsScored += 1
                htmlOutput += '<li>Internet Explorer does not allow software to run or install if the signature is invalid</li>'
            i += 1
        except:
           break
    
    return [pointsScored, totalPoints, htmlOutput]
