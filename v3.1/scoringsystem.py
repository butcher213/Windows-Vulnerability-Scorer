#Trevor's scoring system
#
# Created by: Trevor Butcher
# 9/13/17
#
# import the necessary functions from external files
from httpscorer import scorehttp
from ftpscorer import scoreftp
from forensics import scoreForensics
from updatechecker import scoreUpdates
from firefoxprefsscorer import scoreFirefox
from filezilla import scoreFileZilla
from registry import scoreRegistry
from permissions import scorePermissions
from xampp import scoreXampp
import time
import winsound
import os
import subprocess
#loop the program
#while True:
#initialize the points variables
pointsScored = 0
totalPoints = 0

#init the vulnerability html target
vulnhtml = '<span id="vulntarget">\n'

# init the function output list
vulnList = []

#run the functions and append the outputs to vulnList
vulnList.append(scoreftp())
vulnList.append(scoreForensics())
vulnList.append(scoreUpdates())
vulnList.append(scoreFirefox())
vulnList.append(scoreFileZilla())
vulnList.append(scoreRegistry())
vulnList.append(scorePermissions())
vulnList.append(scoreXampp())
#all other functions that don't have points run here
scorehttp()

#get the cyberpatriot score
cpwebsite = open("C:/CyberPatriot Score Report/Score Report.html", 'r+')
cpwebData = cpwebsite.read()
cpScore = cpwebData.split('Current Score: ')
cpVulns = cpwebData.split('<li>')
#format the cp vulnerabilities so we can loop through them
del cpVulns[0]
try:
    cpVulns[-1] = cpVulns[-1].split('</li>')[0]
except:
    a = 0
#here is the cyberpatriot score
cpScorecurr = cpScore[1].split(' ')[0]
cpScore = cpScorecurr.split('/')

totalPoints += int(cpScore[1])
pointsScored += int(cpScore[0])
# init counting errors
errors = ''

#loop through vulnList and add the elements to the respecive variables
for vulnCategory in vulnList:
    pointsScored += vulnCategory[0]
    totalPoints += vulnCategory[1]
    vulnhtml += '\t\t\t\t' + vulnCategory[2] + '\n'
    try:
        errors += vulnCategory[3] + '\n'
    except:
        continue

#add the cp vulnerabilities to vulnhtml
for cpVuln in cpVulns:
    #pointsScored += 1
    vulnhtml += '\t\t\t\t<li>' + cpVuln + '\n'
#append the last bit of html
vulnhtml += '\t\t\t</span><!--vulnstop-->'

#save the points scored to the webpage

#retrieve the webpage data
webpage = open("scores.html", "r+")
webData = webpage.read()
webpage.close()

#init the webpage variables
webPatched = ''
webBottom = ''

# split webdata for the service uptime
webSplit = webData.split('<span id="score">')
webSplit.append(webSplit[1].split('</span><!--scorestop-->'))

#grab the current overall score
currentScoreString = webSplit[2][0].split('/')
currscore = float(currentScoreString[0]) / float(currentScoreString[1])

#piece it back together
webPatched += webSplit[0] + '<span id="score">' + str(pointsScored) + "/" + str(totalPoints) + '</span><!--scorestop-->' + webSplit[2][1]

#check to see if any points changed. If points changed, then run the writing function
pointsChange = False
if float(pointsScored) / float(totalPoints) > currscore:   
    try:
        subprocess.check_call("points.bat", shell=True)
    except:
        errors += 'some kind of error with the scoring audio. Make sure desktop experience in Windows Features and the Windows audio service are enabled and running.'
    pointsChange = True
elif float(pointsScored) / float(totalPoints) < currscore:
    try: 
        subprocess.check_call("lostpoints.bat", shell=True)
    except:
        errors += 'some kind of error with the scoring audio. Make sure desktop experience in Windows Features and the Windows audio service are enabled and running.'
    pointsChange = True

#split the webdata for errors
webSplit = webPatched.split('<span id="vulnerrortarget">')
webSplit.append(webSplit[1].split('</span><!--vulnerrorstop-->'))

#piece it back together
webPatched = webSplit[0] + '<span id="vulnerrortarget">' + errors + '</span><!--vulnerrorstop-->' + webSplit[2][1]
# if there are errors, update the webpage
if len(errors) > 0:
   pointsChange = True
if pointsChange == True:
   # split webPatched for the vulnerability list
    webSplit = webPatched.split('<span id="vulntarget">')
    webSplit.append(webSplit[1].split('</span><!--vulnstop-->'))

    #piece it back together
    websiteData = webSplit[0] + vulnhtml + webSplit[2][1]
    #write the data to the webfile
    webpage = open("scores.html", "w")
    webpage.write(str(websiteData))
    webpage.close()

#wait 5 seconds so the loop doesn't break
time.sleep(5)
