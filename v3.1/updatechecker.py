
#imported stuff for file versions
import array
from ctypes import *

#function for getting the version of a file
import configVariables as cv
def get_file_info(filename, info):
    """
    Extract information from a file.
    """
    # Get size needed for buffer (0 if no info)
    size = windll.version.GetFileVersionInfoSizeA(filename, None)
    # If no info in file -> empty string
    if not size:
        return ''
    # Create buffer
    res = create_string_buffer(size)
    # Load file informations into buffer res
    windll.version.GetFileVersionInfoA(filename, None, size, res)
    r = c_uint()
    l = c_uint()
    # Look for codepages
    windll.version.VerQueryValueA(res, '\\VarFileInfo\\Translation',
                                  byref(r), byref(l))
    # If no codepage -> empty string
    if not l.value:
        return ''
    # Take the first codepage (what else ?)
    codepages = array.array('H', string_at(r.value, l.value))
    codepage = tuple(codepages[:2].tolist())
    # Extract information
    windll.version.VerQueryValueA(res, ('\\StringFileInfo\\%04x%04x\\'
+ info) % codepage, byref(r), byref(l))
    return string_at(r.value, l.value)

def scoreUpdates():
    if cv.UV_scoreUpdating == True:
        filesToCheck = cv.UV_scoredPrograms
            
        #uncomment this to get the version of a file for reference
        #print get_file_info('C:/Program Files (x86)/Notepad++/notepad++.exe', 'FileVersion')

        #init the points scored and the html output variables
        pointsScored = 0
        htmlOutput = ''

        #init the total points scored, based on the number of checked files
        totalPoints = len(filesToCheck)
        
        #loop through filesToCheck
        for scoredFile in filesToCheck:
            #find the current version
            currentVersion = get_file_info(scoredFile[0], 'FileVersion')

            #because there is a junk character at the end, we drop the last character
            currentVersion = currentVersion[:-1]

            #split the version by its periods
            currentVersionNumbers = currentVersion.split('.')
            scoredVersionNumbers = scoredFile[1].split('.')
            # convert each point of the versions to ints
            numnum = 0
            for num in currentVersionNumbers:
                currentVersionNumbers[numnum] = int(num)
                numnum += 1
            numnum = 0
            for num in scoredVersionNumbers:
                scoredVersionNumbers[numnum] = int(num)
                numnum += 1
            greater = False
            equal = 0
            iterations = 0
            for versionNum in range(0, len(scoredVersionNumbers)):
                iterations += 1
                if greater == False:
                    try:
                        if scoredVersionNumbers[versionNum] < currentVersionNumbers[versionNum]:
                            greater = True
                            break
                        elif scoredVersionNumbers[versionNum] == currentVersionNumbers[versionNum]:
                            equal += 1
                    except IndexError:
                        print(str(equal) + ' {} ' + str(versionNum))
                        if equal == versionNum:
                            greater = False
                            break
            if iterations == equal:
                greater = True

            if greater == True:
                pointsScored += 1
                htmlOutput += '<li>' + scoredFile[2] + ' has been updated.</li>'
    else:
        pointsScored = 0
        totalPoints = 0
        htmlOutput = ''
    #return the points scored
    return [pointsScored, totalPoints, htmlOutput]


